name: CI / CD

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop
      - master

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore src/Presentation/Solutions.TodoList.WebApi/Solutions.TodoList.WebApi.csproj

      - name: Build
        run: dotnet build src/Presentation/Solutions.TodoList.WebApi/Solutions.TodoList.WebApi.csproj -c Release --no-restore

      - name: Test
        run: |
          dotnet test test/Solutions.TodoList.UnitTests/Solutions.TodoList.UnitTests.csproj --no-build --verbosity normal

      - name: Create image tag
        id: tag
        run: |
          SHORT_SHA=${GITHUB_SHA::8}
          TAG="${SHORT_SHA}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v4
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/solutions.todolist.webapi:latest
            ghcr.io/${{ github.repository_owner }}/solutions.todolist.webapi:${{ steps.tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Develop Server
    needs: build-and-test
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/develop' }}
    steps:
      - name: Install ssh client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEV_SSH_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.DEV_SERVER_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy to develop server
        run: |
          TAG=${{ needs.build-and-test.outputs.image-tag }}
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/solutions.todolist.webapi"
          echo "Deploying $IMAGE_NAME:$TAG to develop server ${{ secrets.DEV_SERVER_HOST }}"
          ssh -o StrictHostKeyChecking=yes "${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER_HOST }}" \
            "set -e
             cd /srv/solutions.todolist/dev
             export IMAGE_TAG=${TAG}
             docker compose pull
             docker compose up -d --no-deps --build
             docker image prune -f || true"

  deploy-prod:
    name: Deploy to Master/Prod Server
    needs: build-and-test
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' }}
    steps:
      - name: Install ssh client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.PROD_SERVER_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy to prod server
        run: |
          TAG=${{ needs.build-and-test.outputs.image-tag }}
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/solutions.todolist.webapi"
          echo "Deploying $IMAGE_NAME:$TAG to prod server ${{ secrets.PROD_SERVER_HOST }}"
          ssh -o StrictHostKeyChecking=yes "${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }}" \
            "set -e
             cd /srv/solutions.todolist/prod
             export IMAGE_TAG=${TAG}
             docker compose pull
             docker compose up -d --no-deps --build
             docker image prune -f || true"
